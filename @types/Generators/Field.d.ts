import { Components, RenderFunction, RenderFunctions } from "./type";
import { Rule } from './Rules';
export default abstract class Field {
    protected column: string;
    protected title?: string;
    components: Components;
    protected _sortable: boolean;
    protected props: any;
    protected _canEdit: boolean;
    protected _rules: Array<[Rule, any?]>;
    protected render_functions: RenderFunctions;
    protected visibleIn: any;
    constructor(column: string, title?: string);
    view(type: string, value: any, item: any): any;
    renderInTable(f: RenderFunction): this;
    renderShow(f: RenderFunction): this;
    renderEdit(f: RenderFunction): this;
    yield(type: string, f: RenderFunction): this;
    render(f: RenderFunction): this;
    getColumn(): string;
    sortable(sortable?: boolean): this;
    isSortable(): boolean;
    hideInIndex(): this;
    hideInShow(): this;
    hideInEdit(): this;
    hideIn(type: string): this;
    onlyInIndex(): this;
    onlyInShow(): this;
    onlyInEdit(): this;
    isVisible(type: string): boolean;
    getProps(): any;
    addProp(name: string, value: any): this;
    disableEdition(): this;
    activeEdition(): this;
    editable(): boolean;
    getTitle(): string;
    rules(rules: (Rule | (Rule | any)[] | string)[]): this;
    getRules(): Array<[Rule, any?]>;
}
